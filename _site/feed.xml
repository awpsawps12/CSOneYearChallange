<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>FrontSeat</title>
    <description></description>
    <link>http://challenge.frontseat.io/</link>
    <atom:link href="http://challenge.frontseat.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 20 Apr 2016 20:42:10 +0800</pubDate>
    <lastBuildDate>Wed, 20 Apr 2016 20:42:10 +0800</lastBuildDate>
    <generator>Jekyll v3.1.2</generator>
    
      <item>
        <title>Day 007</title>
        <description>&lt;p&gt;&lt;img src=&quot;/images/Day007.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我们今天学习的内容有测试 (Testing) 和除错 (Debugging)。&lt;/p&gt;

&lt;h4 id=&quot;section&quot;&gt;测试&lt;/h4&gt;

&lt;p&gt;我们写的代码不可能永远都不会出错，所以我们需要，&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;测试的方法 (Testing Methods)，使用测试样例来检测代码是否运行正常&lt;/li&gt;
  &lt;li&gt;除错的方法 (Debugging Methods)，&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在我们开始编程之前，我们就应该设计我们的代码以使得更简单的去进行测试和除错，&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;将我们的程序拆解成个个组件 (Components) ，使我们可以单独的测试它们每一个&lt;/li&gt;
  &lt;li&gt;编写良好的技术文档 (Documentation) ，记录对于程序输入与输出的预期&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;首先在我们开始测试之前，我们需要满足以下两点，&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;确保程序可以正常运行，目的是为了除去语法 (Syntax Errors)和词法错误 (Static Semantic Errors)&lt;/li&gt;
  &lt;li&gt;对于程序运行结果有一个预期&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;Test Suite&lt;/em&gt;（测试组件）, is a collection of inputs that has high likelihood of revealing bugs.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;对可能的输入进行划分 (partition) ，每一组输入都代表一种单独的属性，&lt;/p&gt;

&lt;p&gt;当没有自然分区 (Natural Partition) 的时候，可以使用随机测试 (Random testing)，因为这时代码的正确率与测试样例的数量成正比&lt;/p&gt;

&lt;p&gt;黑盒测试 (Black-box Testing)，也可以称为功能测试、数据驱动测试或基于规格说明的测试。一种关注于程序的输入、输出和系统的功能的测试，
- 任何人都可以进行的测试
- 可以避免开发者的固有偏见 (Inherent Biases)，更容易发现潜在的错误
- 测试样例的复用性很高&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;paths through the specification&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;测试时是应考虑边界条件，&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;对于列表 (List)，应考虑空列表 (Empty List)，单独元素列表 (Singleton List)，多元素列表 (Many Element List)&lt;/li&gt;
  &lt;li&gt;对于数字 (Numbers)，应考虑极小数，极大数以及特征值 (Typical )&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;透明盒测试（Glass-box Testing)，又称透明盒测试（glass box testing）、结构测试（structural testing）或基于程序本身的测试，一种关注于应用程序的内部结构或运作的测试(测试程序中每一条逻辑的正确性)，&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;检测 &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt; 语句的每一条分支&lt;/li&gt;
  &lt;li&gt;检测每一条 &lt;code class=&quot;highlighter-rouge&quot;&gt;except&lt;/code&gt; 的分句 (Each &lt;code class=&quot;highlighter-rouge&quot;&gt;except&lt;/code&gt; clause)&lt;/li&gt;
  &lt;li&gt;检测每一个循环语句(没有进入循环体，循环体执行一次以及循环的多次执行)，对于 &lt;code class=&quot;highlighter-rouge&quot;&gt;while&lt;/code&gt; 语句，还需要检查跳出循环的条件&lt;/li&gt;
  &lt;li&gt;检查每一个递归函数(没有进行递归，递归一次以及多措递归)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;经行测试 (Conduct test) 的步骤，&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;单元测试 (Unit testing)，对程序每一个模块 (module) 进行以找到算法错误 (Algorithm Bugs)。&lt;/li&gt;
  &lt;li&gt;集成测试 (Integration testing)，将程序的所有模块全部关联起来进行测试以找到交互错误 (Interaction Bugs)。&lt;/li&gt;
  &lt;li&gt;循环执行前两步&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;自动化测试,
- 测试驱动（Test Drivers）
- 部分功能模块模拟（Stubs）&lt;/p&gt;

&lt;h4 id=&quot;section-1&quot;&gt;除错&lt;/h4&gt;

&lt;p&gt;运行环境错误 (Runtime Bugs)，当程序运行所产生的错误&lt;/p&gt;

&lt;p&gt;显式 (Overt) vs. 隐式(Covert)，&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;显式错误，即错误有明显的表现形式，比如代码无限执行，代码崩溃。&lt;/li&gt;
  &lt;li&gt;隐式，即错误没有明显的表现形式，比如程序返回一个错误的值，但很难查明原因。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;持续性 (Persistent) vs. 间歇性 (Intermittent)，&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;持续性错误，当程序运行时，一直产生的错误。&lt;/li&gt;
  &lt;li&gt;间歇性错误，只有特点条件下或是在不同时间相同输入所产生的错误。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;程序错误的种类，&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;显式且持续性错误，容易被检测到，可以使防御性编程（Defensive programming）来进行避免&lt;/li&gt;
  &lt;li&gt;显示且间歇性错误，难以被发现及除错，当时如果我们能复现产生该类型错误的条件，我们就可以更好的去解决它。&lt;/li&gt;
  &lt;li&gt;隐式错误，很难被发现，只有程序运行了足够长的时间后才能有所察觉。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;除错的技巧，是将寻找错误的过程当做一个搜索问题去处理，“寻找对于错误表现的解答，而不是为什么错误”&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;研究现有的数据&lt;/li&gt;
  &lt;li&gt;形成一些通过研究数据得出的假设&lt;/li&gt;
  &lt;li&gt;设计一个可重复性的实验，来一一检验这些假设&lt;/li&gt;
  &lt;li&gt;通过这些检验结果来缩小假设的范围&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;当发现错误的时候，我们可以使用二元检查法，即在程序的一半处打断点，检查运行哪一部分时会出现错误。以此循环，用来缩小检查范围，定位程序错误。&lt;/p&gt;

&lt;p&gt;下面是一些常用的排错小提示，&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;检查经常产生的基本代码错误&lt;/li&gt;
  &lt;li&gt;查找为什么代码会这样运行的原因，而不是查找为什么代码没有按照自己所预想的那样运行的原因&lt;/li&gt;
  &lt;li&gt;错误往往出现在你想不到的地方，所以应排除任何一个可能出错的地方&lt;/li&gt;
  &lt;li&gt;向他人解释出了什么问题，和程序的流程&lt;/li&gt;
  &lt;li&gt;不要相信说明文档&lt;/li&gt;
  &lt;li&gt;做一个短暂的休息&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 19 Apr 2016 00:00:00 +0800</pubDate>
        <link>http://challenge.frontseat.io/2016/04/19/day-007.html</link>
        <guid isPermaLink="true">http://challenge.frontseat.io/2016/04/19/day-007.html</guid>
        
        
      </item>
    
      <item>
        <title>Day 006</title>
        <description>&lt;p&gt;&lt;img src=&quot;/images/Day006.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;符合数据类型 (Compound Data Types)
- 元祖 (Tuples)
- 列表 (Lists)
- 词典 (Dictionaries)&lt;/p&gt;

&lt;p&gt;元祖是由任意元素组成的有序列表。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;tuples_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;element0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;element2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;元祖的属性与方法有，
- 元祖一旦初始化后就&lt;strong&gt;不能修改&lt;/strong&gt; (就如同，&lt;code class=&quot;highlighter-rouge&quot;&gt;int&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;float&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;str&lt;/code&gt; 也同样在初始化后不可修改)
- 拼接 (Concatenation)
- 使用索引 (Index) 调用内部元素
- 截取 (Slicing)
- 初始化单独元素的时候，需要加逗号以区分和数字的区别，&lt;code class=&quot;highlighter-rouge&quot;&gt;tulpe = (1,)&lt;/code&gt;
- 可使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;For loop&lt;/code&gt; 对元祖元素进行遍历&lt;/p&gt;

&lt;p&gt;列表，与元祖类似，由任意元素组成的有序列表，不同的是，使用中括号进行定义并且&lt;strong&gt;可以修改&lt;/strong&gt;，&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;list_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;element0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;element2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;列表的属性与方法有，
- 初始化单独元素的时候，不需加额外的逗号，&lt;code class=&quot;highlighter-rouge&quot;&gt;list = [1]&lt;/code&gt;
- 列表是可变的
- 可使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;For loop&lt;/code&gt; 对列表元素进行遍历
- 使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;append()&lt;/code&gt; 向列表末尾添加元素，与拼接创建出一个新列表不同，&lt;code class=&quot;highlighter-rouge&quot;&gt;append()&lt;/code&gt; 修改了原列表
- 克隆 (Clone) &lt;code class=&quot;highlighter-rouge&quot;&gt;new_list = origin_list[:]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;函数是第一类对象 (First-class Object)，第一类对象拥有以下特性，
- 拥有类型 (Types)
- 可以成为数据结构中的元素
- 可以在表达式中使用，比如赋值表达式或是作为函数参数&lt;/p&gt;

&lt;p&gt;高阶函数 (Higher-order Functions)
- &lt;code class=&quot;highlighter-rouge&quot;&gt;map(element0, element1, ...)&lt;/code&gt; 函数接收两个或以上参数，&lt;code class=&quot;highlighter-rouge&quot;&gt;element0&lt;/code&gt;是函数，&lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt; 将传入的函数依次作用到序列的每个元素，并把结果作为新的list返回。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;L1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;28&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;36&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;L2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;57&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;L1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;L2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;      &lt;span class=&quot;c&quot;&gt;#[1, 28, 9]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;词典，使用键-值（Key-value）存储&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;键初始化后是不可变的，对应的值是可变的&lt;/li&gt;
  &lt;li&gt;键可以是复杂形式&lt;/li&gt;
  &lt;li&gt;不能以数字索引访问其中的元素，以键进行索引&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 18 Apr 2016 00:00:00 +0800</pubDate>
        <link>http://challenge.frontseat.io/2016/04/18/day-006.html</link>
        <guid isPermaLink="true">http://challenge.frontseat.io/2016/04/18/day-006.html</guid>
        
        
      </item>
    
      <item>
        <title>Day 005</title>
        <description>&lt;p&gt;&lt;img src=&quot;/images/Day005.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;今天我们学到的知识是递归（Recursion）和复合数据类型。&lt;/p&gt;

&lt;p&gt;循环让我们可以使用循环的算法（第三天的四种算法）。而递归则可以化难为简，将一个复杂的问题简化，直至简化到这个问题可以简单到直接获取他的答案。（不要害怕递归，其实它只是一种运算思路并不是什么高深莫测的东西）&lt;/p&gt;

&lt;p&gt;递归就是一个函数在函数体内调用自己的运算方式。下面是一个简单的乘法递归例子，&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;recursion_multiplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recursion_multiplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;任何一个递归函数都拥有下面的两个特性，&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;至少拥有一个结束判断（Base Case）&lt;/li&gt;
  &lt;li&gt;至少拥有一个递归判断（Recursion Case）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;当调用递归函数的时候，根据实参值得不同来进入不同判断，直到某一次的函数调用触发了结束判断时，函数的值就会一层层的返回到它的调用函数中，并在最后成为第一个调用函数的返回值。&lt;/p&gt;

&lt;p&gt;符合数据类型（Compound Data Type 在 Python 中也称之为 Non-scalar Script），是有基础数据类型组合而成。在 Python 中它们是 Tuples，Lists 还有 Dictionary。&lt;/p&gt;

&lt;p&gt;下面我们来简单的对比下这几个数据类型的区别，&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Tuple，有序不可修改的元素组（元素可以为任意数据类型）&lt;/li&gt;
  &lt;li&gt;List，有序可以修改的元素组&lt;/li&gt;
  &lt;li&gt;Dictionary，无序可修改的并可用关键字引用的数据类型&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;可修改的数据类型会存在别名错误（Aliasing Bug）这种错误就是不同的变量名引用了同样的数据源，修改数据源则会导致其他的这几个变量所引用的的数据全部发生了改变。&lt;/p&gt;
</description>
        <pubDate>Sat, 16 Apr 2016 00:00:00 +0800</pubDate>
        <link>http://challenge.frontseat.io/2016/04/16/day-005.html</link>
        <guid isPermaLink="true">http://challenge.frontseat.io/2016/04/16/day-005.html</guid>
        
        
      </item>
    
      <item>
        <title>Day 004</title>
        <description>&lt;p&gt;&lt;img src=&quot;/images/Day004.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;今天我们学到的内容是抽象（Abstraction）以及在 Python 中如何使用函数进行抽象&lt;/p&gt;

&lt;p&gt;程序抽象可以，&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;让使用者不用关心底层的实现过程&lt;/li&gt;
  &lt;li&gt;复用&lt;/li&gt;
  &lt;li&gt;有效的控制变量的作用域&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;函数其实就是最基本的一种代码抽象的方式。在 Python 中，定义一个函数要使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;def&lt;/code&gt; 语句，依次写出函数名、括号、括号中的参数和冒号 &lt;code class=&quot;highlighter-rouge&quot;&gt;:&lt;/code&gt;，以及缩进块中编写函数体。&lt;/p&gt;

&lt;p&gt;我们其实经常说“传参”其实这个参数是有一个实参（Actual Parameter）和形参（Formal Parameter 也叫 Argument）的区别。形参是指在函数定义时设置的参数，实参则是真正传入的参数。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 这里的参数为形参&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;function_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;formal_parameter0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;formal_parameter1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 这里传入的就是实参&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;function_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;actual_parameter0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actual_parameter1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;函数体包含了任意的合法表达式，一下两种情况会终止函数体执行，
1. 函数体内的表达式全部执行完成，这种情况下会返回 &lt;code class=&quot;highlighter-rouge&quot;&gt;None&lt;/code&gt;，代表没任何东西被返回
2. 遇见关键字 &lt;code class=&quot;highlighter-rouge&quot;&gt;return&lt;/code&gt; ,这种情况下会返回指定表达式的值&lt;/p&gt;

&lt;p&gt;当我们调用一个函数的时候，&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;将实参 (Actual Parameter）和形参（Formal Parameter）绑定在一起&lt;/li&gt;
  &lt;li&gt;将执行指针 (Point of Execution) 指向函数体&lt;/li&gt;
  &lt;li&gt;执行函数体&lt;/li&gt;
  &lt;li&gt;函数体返回的值即为函数的调用值&lt;/li&gt;
  &lt;li&gt;将执行指针的指向改变回来&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;程序执行环境 (Environment)是一种用于查询变量与其所属的值绑定关系的方式。在 Python Shell 的环境中存在的所有变量均为全局变量也就是说他们处于一个全局环境中（Global Environment）。&lt;/p&gt;

&lt;p&gt;当我们调用一个函数时，
2. 函数对象会创建出一个新的子环境，在这个环境中根据调用时传递的数值重新进行变量绑定
3. 根据新的子环境中的变量绑定关系，执行函数体内的表达式&lt;/p&gt;

&lt;p&gt;每次函数调用的作用域被称作静态作用域 (Static Scope) 或词法作用域 (Lexical Scope)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;square&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;twoPower&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;square&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;twoPower&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;       &lt;span class=&quot;c&quot;&gt;#256&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;全局中的变量绑定的值不会影响到函数环境中的变量值&lt;/li&gt;
  &lt;li&gt;函数体中所需要变量 &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; 的值来源于参数传递，而非全局环境下的同名变量值&lt;/li&gt;
  &lt;li&gt;在最初调用 &lt;code class=&quot;highlighter-rouge&quot;&gt;twoPower()&lt;/code&gt; 时&lt;/li&gt;
  &lt;li&gt;在 &lt;code class=&quot;highlighter-rouge&quot;&gt;while&lt;/code&gt; 循环中每次调用 &lt;code class=&quot;highlighter-rouge&quot;&gt;square()&lt;/code&gt; 时，都会产生新的运行环境，而这个环境的父子环境为调用 &lt;code class=&quot;highlighter-rouge&quot;&gt;twoPower()&lt;/code&gt; 所产生的运行环境，所以 &lt;code class=&quot;highlighter-rouge&quot;&gt;square(x)&lt;/code&gt; 中所需要的 &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; 的值来源于 &lt;code class=&quot;highlighter-rouge&quot;&gt;twoPower()&lt;/code&gt; 运行环境&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;函数的两种属性，
- 可分性 (Decomposition)，我们可以讲问题分解成无数个模块，并且每个模块是可复用的
- 抽象性 (Abstraction)，用户并不需要知道程序的具体细节，他们只需要知道怎么使用，函数能够让细节保持在内部并不暴漏出来，就像一个黑盒&lt;/p&gt;

&lt;p&gt;模块化使程序的可维护性以及复用性大大提高，并且避免了函数名和变量名冲突。在 Python 中的模块是一个单独存在的 &lt;code class=&quot;highlighter-rouge&quot;&gt;*.py&lt;/code&gt; 文件，其中包含了若干个定义或封装好的函数，每一个模块都拥有自己独立的执行环境。下面是一个 Python 模块的例子&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# XYMath.py&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;3.141592653&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;import&lt;/code&gt; 来调用模块并创建一个命名空间（Namespace）再用点的方式（Dot Notation）来获取这个命名空间里的数据。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# app.py&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;XYMath&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;XYMath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pi&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# -&amp;gt; 3.141592653&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt; 来引用全部的内容，有些类似于拷贝整个模块中的文件去引用文件的行首。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# app0.py&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;XYMath&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pi&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# -&amp;gt; 3.141592653&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Fri, 15 Apr 2016 00:00:00 +0800</pubDate>
        <link>http://challenge.frontseat.io/2016/04/15/day-004.html</link>
        <guid isPermaLink="true">http://challenge.frontseat.io/2016/04/15/day-004.html</guid>
        
        
      </item>
    
      <item>
        <title>Day 003</title>
        <description>&lt;p&gt;&lt;img src=&quot;/images/Day003.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;今天我们学到的内容是 Python 的迭代循环以及算法基础。&lt;/p&gt;

&lt;p&gt;迭代循环 (Iteration Loop)，
1. 始于一个判断条件，判断条件返回一个布尔值（&lt;code class=&quot;highlighter-rouge&quot;&gt;True&lt;/code&gt; 或者 &lt;code class=&quot;highlighter-rouge&quot;&gt;False&lt;/code&gt;）
2. 如果为 &lt;code class=&quot;highlighter-rouge&quot;&gt;True&lt;/code&gt; ，则执行循环内部代码，然后再次进行判断，以此循环
3. 直到判断条件为 &lt;code class=&quot;highlighter-rouge&quot;&gt;False&lt;/code&gt; 时才跳出循环体&lt;/p&gt;

&lt;p&gt;一个简单使用循环和加法完成乘法运算的例子，&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;itersLeft&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;itersLeft&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;itersLeft&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;itersLeft&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;*&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;=&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;需要在循环体外面摄设置一个循环变量，该例子中分别为 &lt;code class=&quot;highlighter-rouge&quot;&gt;itersLeft&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;对循环变量进行条件判断已决定什么时候终止循环，该例子中为 &lt;code class=&quot;highlighter-rouge&quot;&gt;itersLeft != 0&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;在每次执行完循环体内的代码时，需要改变循环变量的数值，该例子中为 &lt;code class=&quot;highlighter-rouge&quot;&gt;itersLeft = itersLeft  - 1&lt;/code&gt;，如果不改变，则每次判断的结果都相同，循环就不会终止&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Python 中有两种迭代循环方法，他们分别是
- &lt;code class=&quot;highlighter-rouge&quot;&gt;while&lt;/code&gt; 循环
- &lt;code class=&quot;highlighter-rouge&quot;&gt;For&lt;/code&gt; 循环&lt;/p&gt;

&lt;p&gt;循环的特点是具备循至少一个环变量(设置初始值，根据判断条件进行判断，在循环体内改变循环变量)，或者我们可称之为状态变量 (State Variable)&lt;/p&gt;

&lt;p&gt;我们来回忆一下，分支结构 (Branching Structures) 允许我们根据不同的条件执行不同的代码块，因此程序的执行时间是固定的 (Constant Time)，因为每个代码块被执行的次数至多为 1 次。&lt;/p&gt;

&lt;p&gt;循环结构允许我们根据不同的条件重复执行相同的代码块，这样程序的执行时间则是根据循环次数而决定的。&lt;/p&gt;

&lt;p&gt;计算机内部任何数值需要被转换成二进制数值才能用于进行计算和存储，下面是两个简单进制转换算法&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;十进制整数转换二进制正数&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;isNeg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;abs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;isNeg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;&#39;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;0&#39;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# &amp;lt;- get the binary digit&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# &amp;lt;- shift to right&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isNeg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;-&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;十进制小数转换成二进制小数&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Refer conversion steps above&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# (1) Convert fractional into whole num&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;p:&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;&#39;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;0&#39;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# (2) Convert decimal into binary&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)):&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# (3) Division, shift left&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;0&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;.&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;Binary Representation&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Thu, 14 Apr 2016 00:00:00 +0800</pubDate>
        <link>http://challenge.frontseat.io/2016/04/14/day-003.html</link>
        <guid isPermaLink="true">http://challenge.frontseat.io/2016/04/14/day-003.html</guid>
        
        
      </item>
    
      <item>
        <title>Day 002</title>
        <description>&lt;p&gt;&lt;img src=&quot;/images/Day002.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;今天我们学到的内容是编程语言 Python 的一些基础知识。&lt;/p&gt;

&lt;p&gt;当我们想要将我们的一些基于计算思维的想法转换成计算能懂的机器语言的时候，编程语言就成为了两者间的媒介，编程语言定义了一些句法和语义来帮助我们进行转换。&lt;/p&gt;

&lt;p&gt;我们来回忆一下，句法（Syntax）说明编程语言中，哪些符号或字符的组合方式是合法的，语义（Semantic）则是对于编程所要表达意思的解释&lt;/p&gt;

&lt;p&gt;通过使用编程语言编写的对于计算操作指令称为源代码 (Source Code)&lt;/p&gt;

&lt;p&gt;编程语言的对比：
- 低级语言 (Low-level Programming Language) vs. 高级语言 (High-level Programming Language)
- 直译式语言 (Interpreted Language) vs. 编译式语言 (Compiled Language)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;./resources/program_language_options.jpg&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;p&gt;低级语言,
- 低级编程语言的语法与语义和计算机的机器语言极其相似
- 检查程序仅仅检查其语法的正确和静态语义的正确
- 仅仅是按照解析器 (Interpreter) 所指向的命令顺序进行执行&lt;/p&gt;

&lt;p&gt;高级语言,
- 直译式语言：这种类型的编程语言，会将代码一句一句在执行前转换成机器码运行
  - Python 就是直译式的编程语言
- 编译式语言：这种编程语言需要利用解释器，在运行期，动态将代码逐句直译（Interpret）为机器码，或是已经预先编译为机器码的的子程序，之后再运行&lt;/p&gt;

&lt;p&gt;最基本的 Python 解析器被称为 shell，用户可在其中直接输入命令来执行各种各样的任务&lt;/p&gt;

&lt;p&gt;对象 (Objects) 是 Python 程序中操作的核心元素，对象定义了类型和程序可以对该对象进行的操作，有两种类型的对象：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;基本对象 (Scalar Objects)：
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;int&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;float&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bool&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;None&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;非基本对象 (Compound Objects 也称之为 Non-scalar Objects)
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;string&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;etc.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;表达式是由对象和操作符 (Operators) 拼接而成。&lt;/p&gt;

&lt;p&gt;直线程序 (Straight-line programs)，即按照命令顺序执行的程序&lt;/p&gt;

&lt;p&gt;分支程序 (Brunch Programs)，分支程序允许我们根据不同的条件执行不同的程序&lt;/p&gt;

&lt;p&gt;最简单的分支语句是条件语句 (Conditional)
  - 条件语句都拥有一个判断条件，即一个能得出 &lt;code class=&quot;highlighter-rouge&quot;&gt;Ture&lt;/code&gt; 或者 &lt;code class=&quot;highlighter-rouge&quot;&gt;False&lt;/code&gt; 的布尔（Boolean）表达式
  - 条件语句都包含该两个代码块，即一个当判断条件为 &lt;code class=&quot;highlighter-rouge&quot;&gt;Ture&lt;/code&gt; 的时候执行的代码，另一个是判断条件为 &lt;code class=&quot;highlighter-rouge&quot;&gt;False&lt;/code&gt; 时执行的代码&lt;/p&gt;

&lt;p&gt;下面是一个简单的判断程序，&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;raw_input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;Enter an integer:&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;Even&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;Odd&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;Done with conditional&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Python 使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;==&lt;/code&gt; 判断符进行值之间的比较判断，一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;=&lt;/code&gt; 为赋值运算符。空格在 Python 中是非常重要的，因为 Python 用它来区分代码块。&lt;/p&gt;
</description>
        <pubDate>Wed, 13 Apr 2016 00:00:00 +0800</pubDate>
        <link>http://challenge.frontseat.io/2016/04/13/day-002.html</link>
        <guid isPermaLink="true">http://challenge.frontseat.io/2016/04/13/day-002.html</guid>
        
        
      </item>
    
      <item>
        <title>Day 001</title>
        <description>&lt;p&gt;&lt;img src=&quot;/images/Day001.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;今天我们学到的内容有计算和计算思维（Computational Thinking）的基本原则。&lt;/p&gt;

&lt;p&gt;计算机只做两件事并做的非常好，&lt;strong&gt;计算&lt;/strong&gt; 和 &lt;strong&gt;储存&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;计算机里的存储单元的基本单位为 &lt;strong&gt;字节&lt;/strong&gt; (byte)，他们看起来就像是这样，&lt;code class=&quot;highlighter-rouge&quot;&gt;00000000&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;计算模式思维&lt;/strong&gt; 指把任何问题都当做可以被数字和公式去解决的数学问题。&lt;/p&gt;

&lt;p&gt;知识分为两种类型，
- 陈述性 (Declarative) 知识，用以阐述客观事实
- 流程性 (Imperative) 知识，用以阐述“怎么样能够…”的一系列步骤&lt;/p&gt;

&lt;p&gt;在计算机科学中我们更注重的是流程性的知识，因为它可以帮我们解决问题。&lt;/p&gt;

&lt;p&gt;计算机有两种类型，&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;固定型 (Fixed)，被设计用于执行特定的事情（例如，计算器）&lt;/li&gt;
  &lt;li&gt;存储型 (Stored)，可存储和操作用户指令
    &lt;ul&gt;
      &lt;li&gt;用户指令是基于原始内置指令构建封装而成，原始内置指令 (Primitive Instructions) 包括：
        &lt;ul&gt;
          &lt;li&gt;算数单元 (Arithmetic) 和逻辑单元 (Logic)&lt;/li&gt;
          &lt;li&gt;简单的测试单元&lt;/li&gt;
          &lt;li&gt;对于数据的操作&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;解析器（Interpreter）用于执行指令
        &lt;ul&gt;
          &lt;li&gt;使用测试单元进行流程控制 (Flow of Control)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/basic_machine_architecture.png&quot; width=&quot;300&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;基础计算机结构&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;内存 (Memory)，用于存储用户指令和运行所得到的结果&lt;/li&gt;
  &lt;li&gt;算数逻辑单元 (Arithmetic Logic Unit)，完成原始操作指令的运行&lt;/li&gt;
  &lt;li&gt;控制单元 (Control Unit)，控制运行流程，控制算数逻辑单元执行某条命令&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;计算机的运算流程，&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;内存中存储了一系列指令 (Instructions)&lt;/li&gt;
  &lt;li&gt;在控制单元中会初始化一个程序计数器 (Program Counter) 指向内存序列中的第一条指令，当程序开始运行时，解析器会从这条指令开始执行&lt;/li&gt;
  &lt;li&gt;执行这条指令时，会从内存中取出数值，在算数逻辑单元中运行，运行结束后会将结果返回给内存&lt;/li&gt;
  &lt;li&gt;程序计数器的数值加 &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt; ，以为着指向下一条将要被执行的指令。直至所有命令运行完毕&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;流程控制可以改变程序计数器的数值，这样就可以改变所执行的命令了。&lt;/p&gt;

&lt;p&gt;任何一种编程语言都有下面的四个特性，&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;它提供了基础的操作指令（Primitive Constructs），例如数据类型和操作符号&lt;/li&gt;
  &lt;li&gt;句法（Syntax），怎么样的代码是合法的字符串，比如中文句子需要在结尾处有句号&lt;/li&gt;
  &lt;li&gt;静态语义（Static Semantics），在未执行代码时，代码是有意义的。例如，&lt;code class=&quot;highlighter-rouge&quot;&gt;狗吃阳光。&lt;/code&gt;是一个符合句法的句子，但是它本身并无意义因为狗不能吃阳光&lt;/li&gt;
  &lt;li&gt;语义（Semantics），在满足上述两条的情况下，每一句代码有且只有唯一的一个意思&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;随之而来也会产出两种错误，&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;语法错误（Syntax Error)，常见但很容易被计算机捕获到，在运行程序之前即可被发现&lt;/li&gt;
  &lt;li&gt;语义错误（Semantics Error），一部分语言在运行程序前检查，另一些语言在解析时检&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 12 Apr 2016 00:00:00 +0800</pubDate>
        <link>http://challenge.frontseat.io/2016/04/12/day-001.html</link>
        <guid isPermaLink="true">http://challenge.frontseat.io/2016/04/12/day-001.html</guid>
        
        
      </item>
    
  </channel>
</rss>
